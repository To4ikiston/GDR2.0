let audioContext;
let mediaStream;
let workletNode;
let websocket;
let isActive = false;

// –ü–æ—Ä–æ–≥, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
let threshold = 0.95;
let bufferDuration = 3;

// HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
const startBtn = document.getElementById("startBtn");
const stopBtn = document.getElementById("stopBtn");
const statusSpan = document.getElementById("statusSpan");
const corrSpan = document.getElementById("corrSpan");
const mlSpan = document.getElementById("mlSpan");          // ‚Üê –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ML
const finalSpan = document.getElementById("finalSpan");    // ‚Üê –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
const alertP = document.getElementById("alertP");
const alarmAudio = document.getElementById("alarmAudio");
const spectrogramImg = document.getElementById("spectrogram");

const thresholdRange = document.getElementById("thresholdRange");
const bufferRange = document.getElementById("bufferRange");
const thrVal = document.getElementById("thrVal");
const bufVal = document.getElementById("bufVal");

// Chart.js setup
let ctx = document.getElementById("myChart").getContext("2d");
let corrChart = new Chart(ctx, {
  type: "line",
  data: {
    labels: [],             // –±—É–¥–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    datasets: [{
      label: "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è",
      data: [],
      borderColor: "blue",
      fill: false
    }]
  },
  options: {
    scales: {
      y: {
        min: 0,
        max: 1
      }
    }
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
thrVal.textContent = threshold.toFixed(2);
bufVal.textContent = bufferDuration;

// –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤–∏–≥–∞–µ—Ç —Å–ª–∞–π–¥–µ—Ä—ã
thresholdRange.oninput = () => {
  threshold = parseFloat(thresholdRange.value);
  thrVal.textContent = threshold.toFixed(2);
  sendParams();
};

bufferRange.oninput = () => {
  bufferDuration = parseInt(bufferRange.value);
  bufVal.textContent = bufferDuration;
  sendParams();
};

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendParams() {
  if (websocket && websocket.readyState === WebSocket.OPEN) {
    const msg = `PARAMS|threshold=${threshold},buffer=${bufferDuration}`;
    websocket.send(msg);
  }
}

// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
startBtn.onclick = async () => {
  if (isActive) return;
  isActive = true;

  try {
    // 1) –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
    mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    // 2) –°–æ–∑–¥–∞—ë–º AudioContext (16kHz)
    audioContext = new AudioContext({ sampleRate: 16000 });
    // 3) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º worklet
    await audioContext.audioWorklet.addModule("worklet-processor.js");

    // 4) –°–æ–∑–¥–∞—ë–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –≤–æ—Ä–∫–ª–µ—Ç
    const source = audioContext.createMediaStreamSource(mediaStream);
    workletNode = new AudioWorkletNode(audioContext, "pcm-writer");

    // –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç PCM-–¥–∞–Ω–Ω—ã–µ, –º—ã —à–ª—ë–º –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (base64)
    workletNode.port.onmessage = (event) => {
      if (websocket && websocket.readyState === WebSocket.OPEN) {
        const base64data = btoa(String.fromCharCode(...new Uint8Array(event.data.buffer)));
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ TEXT: "AUDIO|{base64}"
        websocket.send("AUDIO|" + base64data);
      }
    };

    // –°–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã
    source.connect(workletNode).connect(audioContext.destination);

    // –°–æ–∑–¥–∞—ë–º WebSocket
    let proto = (location.protocol === "https:") ? "wss" : "ws";
    let wsUrl = `${proto}://${location.host}/ws`;
    console.log("[JS] Connecting to:", wsUrl);
    websocket = new WebSocket(wsUrl);

    // –ö–æ–≥–¥–∞ WebSocket –æ—Ç–∫—Ä—ã—Ç
    websocket.onopen = () => {
      console.log("[WS] connected.");
      statusSpan.textContent = "–†–ê–ë–û–¢–ê–ï–¢";
      sendParams(); // —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    };

    // –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    websocket.onmessage = (msg) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ 'PARAMS|'
      if (msg.data.startsWith && msg.data.startsWith("PARAMS|")) {
        console.log("[WS] params message, ignoring");
      } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
        try {
          let data = JSON.parse(msg.data);
          if (data.type === "ANALYSIS") {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
            let corr = data.corr;                     // —á–∏—Å–ª–æ
            let detectedCorr = data.detected_corr;    // –±—É–ª–µ–≤–æ
            let detectedML = data.detected_ml;        // –±—É–ª–µ–≤–æ
            let detectedFinal = data.detected_final;  // –±—É–ª–µ–≤–æ
            let spec = data.spectrogram;              // base64
            let hist = data.history;                  // –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä—Ä

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            // 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            corrSpan.textContent = corr.toFixed(3);

            // 2) ML-–ø—Ä–µ–¥iction (true/false)
            mlSpan.textContent = detectedML ? "–î–†–û–ù" : "–Ω–µ—Ç";

            // 3) –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            finalSpan.textContent = detectedFinal ? "üö® –î–†–û–ù!" : "–û–ö";

            // 4) –ï—Å–ª–∏ detectedFinal == true ‚Üí —Å–∏–≥–Ω–∞–ª
            if (detectedFinal) {
              alertP.style.display = "block";
              alarmAudio.currentTime = 0;
              alarmAudio.play().catch(err => console.log("Autoplay blocked:", err));
            } else {
              alertP.style.display = "none";
            }

            // 5) –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
            spectrogramImg.src = spec;

            // 6) –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            corrChart.data.labels = hist.map((_, i) => i); // –∏–Ω–¥–µ–∫—Å—ã
            corrChart.data.datasets[0].data = hist;
            corrChart.update();
          }
          else if (data.type === "PARAMS_ACK") {
            console.log("Params ack:", data);
          }
        } catch (ex) {
          console.log("[WS] Not JSON?", msg.data);
        }
      }
    };

    // –ö–æ–≥–¥–∞ WebSocket –∑–∞–∫—Ä—ã—Ç
    websocket.onclose = () => {
      console.log("[WS] closed.");
      statusSpan.textContent = "–í–´–ö–õ–Æ–ß–ï–ù–ê";
      corrSpan.textContent = "-";
      mlSpan.textContent = "-";
      finalSpan.textContent = "–û–ö";
      alertP.style.display = "none";
      spectrogramImg.src = "";
      // –û—á–∏—Å—Ç–∏–º –≥—Ä–∞—Ñ–∏–∫
      corrChart.data.labels = [];
      corrChart.data.datasets[0].data = [];
      corrChart.update();
    };

  } catch (err) {
    console.error("Error starting audio:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. " + err);
    isActive = false;
  }
};

// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Ç–∫–ª—é—á–∏—Ç—å"
stopBtn.onclick = () => {
  if (!isActive) return;
  isActive = false;

  if (mediaStream) {
    mediaStream.getTracks().forEach(track => track.stop());
    mediaStream = null;
  }
  if (audioContext) {
    audioContext.close();
    audioContext = null;
  }
  if (websocket) {
    websocket.close();
    websocket = null;
  }

  statusSpan.textContent = "–í–´–ö–õ–Æ–ß–ï–ù–ê";
  corrSpan.textContent = "-";
  mlSpan.textContent = "-";
  finalSpan.textContent = "–û–ö";
  alertP.style.display = "none";
  spectrogramImg.src = "";
  corrChart.data.labels = [];
  corrChart.data.datasets[0].data = [];
  corrChart.update();
};

thresholdRange.value = threshold;
thrVal.textContent = threshold.toFixed(2);

bufferRange.value = bufferDuration;
bufVal.textContent = bufferDuration;
